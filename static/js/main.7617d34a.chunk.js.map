{"version":3,"sources":["App.js","index.js"],"names":["renderD3","data","svg","length","margin","top","right","bottom","left","height","minTime","d3","d","time","split","Date","parseInt","maxTime","minYear","maxYear","xScale","domain","range","xAxis","tickFormat","yScale","yAxis","main","current","attr","append","call","legend","text","select","div","style","selectAll","join","value","newTime","on","html","pageX","pageY","App","svgRef","useRef","useEffect","fetch","then","response","json","result","class","id","ref","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7617d34a.chunk.js","sourcesContent":["import React, { useRef, useEffect } from 'react';\nimport * as d3 from 'd3'\nimport './App.css';\n\nfunction App() {\n  const svgRef = useRef();\n\n  useEffect(() => {\n    fetch(\"https://raw.githubusercontent.com/freeCodeCamp/ProjectReferenceData/master/cyclist-data.json\")\n      .then(response => response.json())\n      .then(\n        (result) => {\n          renderD3(result, svgRef)\n        }\n      )\n  }, [])\n\n  return (\n    <div class=\"container\">\n      <h1 id=\"title\">Doping in Professional Bicycle Racing</h1>\n      <svg ref={svgRef}></svg>\n    </div>\n  );\n}\n\nconst renderD3 = (data, svg) => {\n  if (data.length > 1) {\n\n    // Set main SVG area values\n    let margin = {top: 20, right: 20, bottom: 50, left: 60};\n    let height = 500 - margin.top - margin.bottom;\n    let width = 700;\n\n    // GRAB DEM MIN MAX TIMES BOIIIIIIIIII\n    let minTime = d3.min(data, d => {\n      let time = d[\"Time\"].split(':')\n      return new Date(2020, 1, 1, 0, parseInt(time[0]), parseInt([time[1]]));\n    });\n\n    let maxTime = d3.max(data, d => {\n      let time = d[\"Time\"].split(':')\n      return new Date(2020, 1, 1, 0, parseInt(time[0]), parseInt([time[1]]));\n    });\n\n    // GRAB DEM MIN MAX YEARS BOIIIIIIIIIIIIIHJFREWOHBFOIWERQGBF9F8 REEEEEEEEEEEE!\n    let minYear = d3.min(data, d => (d[\"Year\"]));\n    let maxYear = d3.max(data, d => (d[\"Year\"]));\n\n\n    // X Scale and Axis\n    let xScale = d3.scaleLinear()\n                   .domain([minYear-1, maxYear+1])\n                   .range([0, width]);\n\n    let xAxis = d3.axisBottom(xScale).tickFormat(d3.format('d'))\n\n    // Y Scale and Axis\n    let yScale = d3.scaleTime()\n                   .domain([minTime, maxTime])\n                   .range([0, height])\n\n    let yAxis = d3.axisLeft(yScale).tickFormat(d3.timeFormat(\"%M:%S\"));\n\n\n    // This is the ENTIRE CHART\n    let chart = d3.select(svg.current)\n                  .attr(\"width\", width + margin.right + margin.left)\n                  .attr(\"height\", height + margin.top + margin.bottom);\n\n\n    // This is the main SVG AREA\n    let main = chart.append('g')\n                    .attr(\"transform\", `translate(${margin.left}, ${margin.top})`)\n                    .attr(\"width\", width)\n                    .attr(\"height\", height)\n                    .attr(\"class\", \"main\");\n\n        \n    // Render the X Axis\n    main.append('g')\n        .attr(\"id\", \"x-axis\")\n        .attr(\"transform\", `translate(0, ${height})`)\n        .call(xAxis);\n\n\n    // Render the Y Axis\n    main.append('g')\n        .attr(\"id\", \"y-axis\")\n        .call(yAxis);\n\n    // Set dat legend!\n    let legend = main.append('g')\n                     .attr(\"id\", \"legend\")\n                     .attr(\"transform\", \"translate(0,250)\")\n\n                      legend.append('g')\n                      .attr('class', 'legend-label1')\n                      .append(\"text\")\n                      .text(\"No doping allegations\")\n                      .attr(\"font-size\", 10)\n                      .attr('x', 570)\n                      .attr('y', 22)\n              // Label 1\n                      legend.select(\".legend-label1\")\n                      .append('rect')\n                      .attr(\"height\", 18)\n                      .attr(\"width\", 18)\n                      .attr('x', 669)\n                      .attr('y', 10)\n                      .attr(\"fill\", \"green\")\n                      \n            // Label 2\n                      legend.append('g')\n                      .attr('class', 'legend-label2')\n                      .append(\"text\")\n                      .text(\"Riders with doping allegations\")\n                      .attr(\"font-size\", 10)\n                      .attr('x', 537)\n                      .attr('y', 53)\n              \n                      legend.select(\".legend-label2\")\n                      .append('rect')\n                      .attr(\"height\", 18)\n                      .attr(\"width\", 18)\n                      .attr('x', 669)\n                      .attr('y', 40)\n                      .attr(\"fill\", \"red\")\n\n\n    let div = d3.select(\".container\").append('div')\n                .attr(\"class\", \"tooltip\")\n                .attr(\"id\", \"tooltip\")\n                .style(\"opacity\", 0);\n\n    // DAMNNNNN LOOK AT THOSE DOTS!!!\n    main\n      .selectAll('.dot')\n      .data(data)\n      .join(\"circle\")\n      .attr(\"class\", \"dot\")\n      .attr(\"cx\", value => xScale(value[\"Year\"]))\n      .attr(\"cy\", value => {\n        let time = value[\"Time\"].split(':')\n        let newTime = new Date(2020, 1, 1, 0, parseInt(time[0]), parseInt([time[1]]));\n        return yScale(newTime)\n      })\n      .attr(\"data-xvalue\", value => value[\"Year\"])\n      .attr(\"data-yvalue\", value => {\n        let time = value[\"Time\"].split(':')\n        let newTime = new Date(2020, 1, 1, 0, parseInt(time[0]), parseInt([time[1]]));\n        return newTime\n      })\n      .attr('r', 5)\n      .attr(\"fill\", value => value[\"Doping\"] === \"\" ? \"green\" : \"red\")\n      .attr(\"stroke\", \"black\")\n\n      .on(\"mouseover\", value => {\n        div.style(\"opacity\", 0.9)\n        div.html(value[\"Name\"] + \": \" + value[\"Nationality\"] + \"<br/>\"\n                 + \"Year: \" + value[\"Year\"] + \", \" + value[\"Time\"] + \"<br/>\" \n                 + value[\"Doping\"])\n           .style(\"left\", (d3.event.pageX) + \"px\")\n           .style(\"top\", (d3.event.pageY - 80) + \"px\");\n           div.attr(\"data-year\", value[\"Year\"])\n\n        // main\n        //   .selectAll(\".tooltip\")\n        //   .data([value])\n        //   .join('text')\n        //   .attr('x', 400)\n        //   .attr('y', 40)\n        //   .attr(\"class\", \"tooltip\")\n        //   .attr('id', \"tooltip\")\n        //   .attr(\"data-year\", value => value[\"Year\"])\n        //   .text(`${value[\"Name\"]}: ${value[\"Nationality\"]}`)\n      })\n      .on(\"mouseleave\", () => { div.style(\"opacity\", 0) .style(\"top\", 0) })\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}